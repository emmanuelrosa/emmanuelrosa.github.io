<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[EmmanuelRosa.com]]></title><link href="http://emmanuelrosa.com/atom.xml" rel="self"/><link href="http://emmanuelrosa.com/"/><updated>2016-01-15T00:00:00-05:00</updated><id>http://emmanuelrosa.com/</id><author><name><![CDATA[Emmanuel Rosa]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Easy WAR deployment]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/easy-war-deployment/"/><updated>2016-01-15T00:00:00-05:00</updated><id>98dcb1f9d47655d923b5988f1f843900</id><content type="html"><![CDATA[<p>As I considered the requirements of moving an existing Grails app from a Cloud-Foundry-based host to a VPS (virtual private service), there was one thought nagging in my mind. It wasn't choosing between the Oracle and OpenJRE, nor configuring PostgreSQL, nor minimizing downtime to be caused by the database restore and DNS updates, nor... It was deployment. That thing I'd have to do as part of developing and supporting the application. I had become accustomed to <em>pushing</em> the app and having it copy over to the host and start up all on its own.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>magical_directory_with_latest_war_file
</span><span class='line'>af login
</span><span class='line'>...
</span><span class='line'>af push myapp
</span></code></pre></td></tr></table></div></figure>
<p>Poof! Validation was one Chrome tab away. Then --most of the time-- I'd find my updates happily humming along. So I set about replicating this work-flow on a naked VPS.</p>
<h2>Nobody's home</h2>
<p>After logging in to the Debian Linux VPS through SSH, I began to implement my <em>infrastructure plan</em>. Installing and configuring as if I had a gun to my head. There was a hard deadline and I wasn't about to miss it.</p>
<p><em>In the end, I got it done</em> waaaay <em>ahead of time. Hell, I didn't know</em> that <em>was going to happen!</em></p>
<p>I found the app a comfortable home in <code>/opt/myapp/</code> and while I was at it, dumped the boring ol' Tomcat and replaced her with a new exiting pal to play footsies with: Jetty. Actually, I replaced Tomcat with Jetty to simply the deployment process I was cooking up; sometimes I loose myself in hyperbole.</p>
<p>With everything in place, and my app running, the only thing missing was the deployment process. How to get new versions of the app copied over and have the app restart with the new code. With an idea in mind, I paid a visit to the mistress. I mean, the <em>other</em> mistress: Mercurial.</p>
<h2>One Mercurial hook a day, keeps the project lead away</h2>
<p>The idea was simple:</p>
<p><img src="http://emmanuelrosa.com/images/deploySequence-3667c072e8e9dc3b1fedca084f7f85b4-55b437fd30b6a38dbc9d8d627d02f657.png" alt="Deployment sequence diagram" /></p>
<p>The developer (me) would check in the latest WAR file into a Mercurial repository. The repository would be a clone of a repo on the VPS. So a push would copy over the changesets and then run a Mercurial hook on the VPS. The hook would first stop the app, then check out the latest WAR file, and finally start the app.</p>
<p>Right away, my first question was: <em>How do I go about stopping and starting the app?</em> And just as quickly a dormant corner of my brain responded: <em>By making the app an ordinary Operating System service. Duh!</em></p>
<p>I looked about at various ways to wrap my app in something that would make it function like an OS service, a daemon, but the solutions gave me indigestion. Besides, I preferred to avoid modifying the code to make this happen. With the app being executed by Jetty, a simple SIGTERM/SIGKILL was enough to shut it down. So I played with the idea of coding a wrapper which could be executed by the OS's init system. The wrapper would be able start/stop the app, and the Mercurial hook could then simply call the wrapper. Being a Gentoo Linux user, I'm familiar with OpenRC. Debian uses systemd, (which I quickly learned is quite nice), so off to creating a systemd service.</p>
<p><em>Here's a fun fact: Due to Gentoo Linux's rolling-release, my current Gentoo installation is the same one --though up-to-date-- installed about 14 years ago.</em></p>
<p>The systemd service for my app looks like this:</p>
<figure class='code'><figcaption><span>/etc/systemd/system/myapp.service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">My App</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">network.target system-postgresql.slice</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">myapp</span>
</span><span class='line'><span class="na">EnvironmentFile</span><span class="o">=</span><span class="s">/etc/myapp.conf</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/java $JAVA_OPTS -jar $JETTY --out $LOG $WAR</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></code></pre></td></tr></table></div></figure>
<p>That was easy. There was no need to manage a PID file! Next, the configuration file for the service.</p>
<figure class='code'><figcaption><span>/etc/myapp.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">JAVA_OPTS</span><span class="o">=</span><span class="s">-Xms512M -Xmx512M -XX:MaxPermSize=256M -XX:PermSize=128M </span>
</span><span class='line'><span class="na">JETTY</span><span class="o">=</span><span class="s">/opt/myapp/jetty-runner-9.2.9.v20150224.jar</span>
</span><span class='line'><span class="na">LOG</span><span class="o">=</span><span class="s">/var/log/myapp/yyyy_mm_dd-myapp.log</span>
</span><span class='line'><span class="na">WAR</span><span class="o">=</span><span class="s">/opt/myapp/webapp/myapp.war</span>
</span></code></pre></td></tr></table></div></figure>
<p>Then it was a matter of enabling the service to run on boot and... giving it a go.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># systemctl enable myapp</span>
</span><span class='line'><span class="c"># systemctl start myapp</span>
</span><span class='line'><span class="c"># systemctl stop myapp</span>
</span></code></pre></td></tr></table></div></figure>
<p>It worked beautifully.</p>
<p>Now, I didn't want to log in as root when pushing to the repo, so I granted my developer account access to the necessary <code>systemctl</code> commands via sudo. Then I was ready for the final piece. The Mercurial hook:</p>
<figure class='code'><figcaption><span>/opt/myapp/webapp/.hg/deployhook.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># NAME: deployhook.sh</span>
</span><span class='line'><span class="c"># AUTHOR: Emmanuel Rosa</span>
</span><span class='line'><span class="c"># PURPOSE: Deploy myapp WAR file on the tip of the default branch</span>
</span><span class='line'>
</span><span class='line'>sudo /bin/systemctl stop myapp <span class="o">&amp;&amp;</span> hg update default <span class="o">&amp;&amp;</span> sudo /bin/systemctl start myapp
</span></code></pre></td></tr></table></div></figure>
<p>I configured the hook to run on <code>changegroup</code>, which means after the entire push completes.</p>
<figure class='code'><figcaption><span>/opt/myapp/webapp/.hg/hgrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[hooks]</span>
</span><span class='line'><span class="na">changegroup</span> <span class="o">=</span> <span class="s">/opt/myapp/webapp/.hg/deployhook.sh</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Happy as a clam</h2>
<p>Having just confirmed the meaning of the expression <em>happy as a clam</em>, I can honestly say that's me. Deployment of my app is <em>still</em> a simple push away, and I had a good time set it all up.</p>
]]></content></entry></feed>