<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[EmmanuelRosa.com]]></title><link href="http://emmanuelrosa.com/atom.xml" rel="self"/><link href="http://emmanuelrosa.com/"/><updated>2016-04-29T17:14:33-04:00</updated><id>http://emmanuelrosa.com/</id><author><name><![CDATA[Emmanuel Rosa]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[How to create your first Groovy AST transformation]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/how-to-create-your-first-groovy-ast-transformation/"/><updated>2016-04-29T17:14:33-04:00</updated><id>d073a5a018cc62bac067a5739a2cb112</id><content type="html"><![CDATA[<p>Are you <em>dying</em> to create a Groovy AST transformation, yet baffled and don't know where to start? You're in the right place. If you simply follow this tutorial step by step, by the time you reach the end, you will have your very own AST transformation. I promise. But first, here's what you need to know before getting started on this tutorial:</p>
<ol>
<li>You must already have Groovy programming experience. Don't let this be your first foray into Groovy.</li>
<li>You must know what an abstract syntax tree (AST) is.</li>
<li>You must know, conceptually, what a Groovy AST transformation is.</li>
</ol>
<p>In this tutorial, I will show you how to create a <em>local</em> AST transformation. This is the type of AST transformation you're probably most familiar with; <code>@ToString</code>, <code>@TupleConstructor</code>, and the like. Local AST transformations are triggered by an annotation, so I'll show you how to create one of those as well. In addition, to keep things simple, you'll complete the entire tutorial using only the Groovy Console. Let's get started!</p>
<h2>Step 1 - Choose the purpose of your AST transformation</h2>
<p>We'll begin with an idea: a local AST transformation to add a method which calculates an object's MD5 hash. Let's name the method <code>toMD5()</code> and have it use <code>toString()</code> as the digest's message. I pilfered the MD5 code from the Grain framework and adapted it slightly as follows:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="nf">toMD5</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">md5</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s1">&#39;MD5&#39;</span><span class="o">)</span>
</span><span class='line'>    
</span><span class='line'>    <span class="n">md5</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">toString</span><span class="o">().</span><span class="na">bytes</span><span class="o">)</span>
</span><span class='line'>    <span class="n">md5</span><span class="o">.</span><span class="na">digest</span><span class="o">().</span><span class="na">inject</span><span class="o">(</span><span class="k">new</span> <span class="n">StringBuffer</span><span class="o">())</span> <span class="o">{</span> <span class="n">sb</span><span class="o">,</span> <span class="n">it</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s1">&#39;%02x&#39;</span><span class="o">,</span> <span class="n">it</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>The idea is to have the AST transformation insert the method shown above into the annotated class. After which <code>toMD5()</code> can be called on an instance of the class. Here's an example of what it would be like to use the AST transformation:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@MD5</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">firstName</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">lastName</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">newInstance</span><span class="o">(</span><span class="nl">firstName:</span> <span class="s1">&#39;John&#39;</span><span class="o">,</span> <span class="nl">lastName:</span> <span class="s1">&#39;Galt&#39;</span><span class="o">).</span><span class="na">run</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;My MD5 checksum is ${toMD5()}&quot;</span>
</span><span class='line'>        <span class="k">assert</span> <span class="nf">toMD5</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;1f7fc3ac2f7c9af4ec46635cb58c26d8&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;$lastName, $firstName&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Step 2 - Import the AST transformation classes</h2>
<p>Now that you know the purpose of the AST transformation, It's time to code it. So open your Groovy console and add the following imports:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.transform.GroovyASTTransformation</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.transform.ASTTransformation</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.control.CompilePhase</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.control.SourceUnit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.ast.builder.AstBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.ast.ASTNode</span>
</span></code></pre></td></tr></table></div></figure>
<p>Here's a rundown of the classes you just imported:</p>
<ul>
<li><code>GroovyASTTransformation</code> - An annotation used to mark an annotated class as a Groovy AST transformation.</li>
<li><code>ASTTransformation</code> - The interface all Groovy AST transformations must implement.</li>
<li><code>CompilePhase</code> - An enum listing the 9 phases (steps) of the Groovy compiler. I'll explain this in more detail in a second.</li>
<li><code>SourceUnit</code> - Provides information about what is being compiled. I know, that's a vague description. The truth is, aside from it being used in global AST transformations, I have no clue what this is for.</li>
<li><code>AstBuilder</code> - Provides a few methods to create AST nodes.</li>
<li><code>AstNode</code> - The base class of all AST nodes.</li>
</ul>
<h2>Step 3 - Create the AST transformation class</h2>
<p>With the imports in place, lay out the boilerplate code for the AST transformation:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@GroovyASTTransformation</span><span class="o">(</span><span class="n">phase</span> <span class="o">=</span> <span class="n">CompilePhase</span><span class="o">.</span><span class="na">CANONICALIZATION</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MD5Transformation</span> <span class="kd">implements</span> <span class="n">ASTTransformation</span> <span class="o">{</span>
</span><span class='line'>   
</span><span class='line'>    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">ASTNode</span><span class="o">[]</span> <span class="n">astNodes</span><span class="o">,</span> <span class="n">SourceUnit</span> <span class="n">sourceUnit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Awesome stuff will go here.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>So now you have the class <code>MD5Transformation</code> which implements the <code>ASTTransformation</code> interface. You're marking the class as a Groovy AST transformation by annotating the class with <code>@GroovyASTTransformation</code>, which requires that you specify the compiler phase <em>after</em> which the transformation will run. <em>WTF?</em> Yeah, I know. Let's demystify this compiler phase thing. Here's a list of the compiler phases in sequential order:</p>
<ol>
<li><strong>Initialization</strong> - The compiler opens any necessary files.</li>
<li><strong>Parsing</strong> - The source code is parsed and a concrete syntax tree (CST) is created.</li>
<li><strong>Conversion</strong> - The CST is converted into the AST.</li>
<li><strong>Semantic Analysis</strong> - Ensures the AST is valid. This phase is important to us because it's the first in which a <em>local</em> AST transformation can be used. Woooooo!</li>
<li><strong>Canonicalization</strong> - Does <em>magical things</em> with inner classes.</li>
<li><strong>Instruction selection</strong> - Adds the AST nodes which Groovy allows us to disregard, such as <code>return</code> statements.</li>
<li><strong>Class generation</strong> - This is where Groovy adds methods such as <code>getMetaClass()</code> and <code>invokeMethod()</code>, and then builds the final class.</li>
<li><strong>Output</strong> - During this phase the compiler vomits the byte-code.</li>
<li><strong>Finalization</strong> - The book-end of the phases. During this phase the compiler releases its resources.</li>
</ol>
<p><small>Source: <a href="http://joesgroovyblog.blogspot.com/2011/09/ast-transformations-compiler-phases-and.html">http://joesgroovyblog.blogspot.com/2011/09/ast-transformations-compiler-phases-and.html</a></small></p>
<p>So, which phase should you use? Honestly, I cannot give you a definitive answer because it really depends on what your AST transformation does, and how it should interact with other AST annotations the user may apply. For example, if your AST transformation adds public fields, then you may want to go before <code>CANONICALIZATION</code>. Why? Because that's when Groovy's <code>@ToString()</code> AST transformation triggers, so if you go ahead of it then it can pick up the fields you add, in the case both AST transformations are used together.</p>
<p>What can you do? When creating your own AST transformation, try <code>SEMANTIC\_ANALYSIS</code> through <code>CLASS\_GENERATION</code> and see if any of them fail for you. Then you'll know which phases <em>not</em> to use! That's the process I used to discover that the <code>CLASS\_GENERATION</code> phase is too late for the <code>MD5Transformation</code>. The method was not be added to the annotated class. I'm going to go with <code>CANONICALIZATION</code> so that most things have been taken care of, yet Groovy can still patch up my work, such as adding <code>return</code> statements.</p>
<p>Now you're ready to implement the <code>visit()</code> method; the heart of the AST transformation:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">ASTNode</span><span class="o">[]</span> <span class="n">astNodes</span><span class="o">,</span> <span class="n">SourceUnit</span> <span class="n">sourceUnit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="o">(</span><span class="n">annotation</span><span class="o">,</span> <span class="n">klass</span><span class="o">)</span> <span class="o">=</span> <span class="n">astNodes</span>        
</span><span class='line'>    <span class="kt">def</span> <span class="n">toMD5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AstBuilder</span><span class="o">().</span><span class="na">buildFromString</span><span class="o">(</span>
</span><span class='line'>        <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">        import java.security.MessageDigest</span>
</span><span class='line'><span class="s2">        </span>
</span><span class='line'><span class="s2">        class ${klass.name} {</span>
</span><span class='line'><span class="s2">            String toMD5() {</span>
</span><span class='line'><span class="s2">                def md5 = MessageDigest.getInstance(&#39;MD5&#39;)</span>
</span><span class='line'><span class="s2">                </span>
</span><span class='line'><span class="s2">                md5.update(toString().bytes)</span>
</span><span class='line'><span class="s2">                md5.digest().inject(new StringBuffer()) { sb, it -&gt;</span>
</span><span class='line'><span class="s2">                    sb.append(String.format(&#39;%02x&#39;, it))</span>
</span><span class='line'><span class="s2">                }.toString()</span>
</span><span class='line'><span class="s2">            }</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'><span class="s2">        &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="o">)[</span><span class="mi">1</span><span class="o">].</span><span class="na">methods</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s1">&#39;toMD5&#39;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="na">addMethod</span><span class="o">(</span><span class="n">toMD5</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>There's quite a bit going on, so let's take it from the top.</p>
<h3>Get the AST nodes for the annotation and the annotated class</h3>
<p>The line <code>def (annotation, klass) = astNodes</code> grabs the first two nodes in <code>astNodes</code> and assigns them to variables. Because this is a local AST transformation, the first node is an <code>AnnotationNode</code>; so it provides a way to get info about the annotation itself, which you'll create shortly. The second node is the annotated node; in this case a <code>ClassNode</code>. The <code>astNodes</code> array looks like this: <code>[class org.codehaus.groovy.ast.AnnotationNode, class org.codehaus.groovy.ast.ClassNode]</code>.</p>
<h3>Create the AST nodes representing the toMD5() method</h3>
<p>Before you can add the <code>toMD5()</code> to the annotated class, you must create the method itself. To do this, you used <code>AstBuilder.buildFromString()</code>. <code>buildFromString()</code> takes Groovy code in the form of a <code>String</code> and produces the AST nodes for it. Isn't that cool! Sure, it's not the most efficient approach (since it basically kicks off another instance of the compiler), nor powerful way to create AST nodes, but it's <em>super</em> convenient.</p>
<p>Now, about methods... what you may or may not know, is that all methods have a class. Groovy gives us some flexibility with scripts by creating one on our behalf, but the class is always there. In the Groovy source passed to <code>buildFromString()</code> there's the expression <code>klass.name</code>. This creates a <code>ClassNode</code> for a class who's name is the same as the annotated class. Don't worry, the classes will not conflict. The end result is a class with the <code>toMD5()</code> method, all represented by AST nodes. But... you want a method, not a class, right?</p>
<p>The <code>AstBuilder</code> returns a list of nodes. Something like this: <code>[org.codehaus.groovy.ast.stmt.BlockStatement@1e0f477f[], SomeClass]</code>. The second item in the list is the <code>ClassNode</code> which contains the <code>toMD5()</code> method. The expression <code>[1].methods[0].find { it.name == 'toMD5' }</code> gets the <code>classNode</code>, looks for the <code>toMD5()</code> method, and returns it.</p>
<h3>Add the toMD5() method to the annotated class</h3>
<p>Finally, now that you have the AST nodes for the <code>toMD5()</code> method, you can add it to the annotated class: <code>klass.addMethod(toMD5)</code>. Your AST transformation is done! Let's move on to the annotation.</p>
<h2>Step 4 - Import the annotation classes</h2>
<p>As of now, you have an AST transformation that's ready to go. But being that it's a local AST transformation, you need to associate the AST transformation with an annotation so that when the Groovy compiler encounters a class using the annotation, it will trigger the AST transformation once the specified compiler phase has completed. So now it's time to create the annotation. Begin with the following imports:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.RetentionPolicy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.ElementType</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.transform.GroovyASTTransformationClass</span>
</span></code></pre></td></tr></table></div></figure>
<p>Here's the breakdown:</p>
<ol>
<li><code>Retention</code> - An annotation used to annotate an annotation to specify how far into the compilation process to retain an annotation. It's used with the next class, <code>RetentionPolicy</code>.</li>
<li><code>RetentionPolicy</code> - An enum to specify how long to retain an annotation. For AST transformations, <code>SOURCE</code>, which means the annotation is discarded quite early, is sufficient because we don't need to use the annotation in run-time.</li>
<li><code>Target</code> - Specifies what can be annotated (ex. class, method, field, etc). See <code>ElementType</code>.</li>
<li><code>ElementType</code> - An enum defining the various types which can be annotated.</li>
<li><code>GroovyASTTransformation</code> - An annotation used to link an AST transformation to its annotation.</li>
</ol>
<h2>Step 5 - Create the annotation</h2>
<p>Next, create the annotation:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">([</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">])</span>
</span><span class='line'><span class="nd">@GroovyASTTransformationClass</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">[</span><span class="n">MD5Transformation</span><span class="o">])</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">MD5</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>That's all it takes to create the <code>MD5</code> annotation. The retention policy is set to <code>SOURCE</code>, the target is set to <code>TYPE</code> which means the annotation can technically be applied to a class, interface, or another annotation; make a mental note of this fact. The <code>classes</code> attribute of the <code>@GroovyASTTransformationClass</code> annotation is set to a list of transformation classes; simply <code>MD5Transformation</code> in this case. Now, you're ready to use the transformation and see it in action!</p>
<h2>Step 6 - Using the transformation</h2>
<p>Before you can use the MD5 AST transformation you created, we've got a problem to solve. AST transformations modify code. However, they are also code. Which means that compilation order is important. If a class is annotated with an AST transformation, that transformation must be compiled first. For this article, we're throwing everything into a single <code>\*.groovy</code> file, so to control the compiling order, we'll use a neat trick: put the annotated class into a separate Groovy shell:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="k">new</span> <span class="nf">GroovyShell</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">classLoader</span><span class="o">).</span><span class="na">evaluate</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">@MD5</span>
</span><span class='line'><span class="s1">class Person {</span>
</span><span class='line'><span class="s1">    def firstName</span>
</span><span class='line'><span class="s1">    def lastName</span>
</span><span class='line'><span class="s1">    </span>
</span><span class='line'><span class="s1">    static void main(String[] args) {</span>
</span><span class='line'><span class="s1">        newInstance(firstName: &#39;</span><span class="n">John</span><span class="s1">&#39;, lastName: &#39;</span><span class="n">Galt</span><span class="s1">&#39;).run()</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">    </span>
</span><span class='line'><span class="s1">    def run() {</span>
</span><span class='line'><span class="s1">        println &quot;My MD5 checksum is ${toMD5()}&quot;</span>
</span><span class='line'><span class="s1">        assert toMD5() == &#39;</span><span class="mi">1</span><span class="n">f7fc3ac2f7c9af4ec46635cb58c26d8</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">    </span>
</span><span class='line'><span class="s1">    String toString() { &quot;$lastName, $firstName&quot; }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Go ahead and run it. If you see the message My MD5 checksum is 1f7fc3ac2f7c9af4ec46635cb58c26d8 congrats!!! You created your first Groovy AST transformation!!!</p>
<h2>What's next?</h2>
<p>So, you've created a local AST transformation by following this tutorial. Now what? Well... there's <em>plenty</em> left to do, such as:</p>
<ol>
<li><strong>Validate your AST nodes</strong> - Recall that the annotation <code>MD5</code> can be used on more that just classes. <code>ElementType.TYPE</code> includes classes, interfaces, annotations, and enums. So you're AST transformations need to keep this in mind and take precaution.</li>
<li><strong>Generate useful errors</strong> - If users of your AST transformation attempt to use it improperly, instead of failing, or acting weird, let them know with a useful error. Groovy provides an API specifically for generating errors from AST transformations.</li>
<li><strong>Be efficient</strong> - An AST transformation is not the place to slack off. Performance is important because poor performance affects your builds. Consider <code>AstBuilder.buildFromString()</code> as a way to draft an AST transformation.</li>
<li><strong>Integrate with your build tool</strong> - In this guide you placed all of the code in a single file (because, well, I told you to). In most cases, you'll be using a build tool, such as Gradle, to build a multi-file project. The trick with AST transformations, as I mentioned before, is to compile AST transformations <em>before</em> you attempt to use them.</li>
</ol>
<p>Got AST transformation questions? Sign up and send me a question :)</p>
]]></content></entry></feed>