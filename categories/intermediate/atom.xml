<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[EmmanuelRosa.com]]></title><link href="http://emmanuelrosa.com/categories/intermediate/atom.xml" rel="self"/><link href="http://emmanuelrosa.com/"/><updated>2015-12-23T19:21:16-05:00</updated><id>http://emmanuelrosa.com/</id><author><name><![CDATA[Emmanuel Rosa]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Design Failure: A reflection of a mistaken Grails app domain model design]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/design-failure-a-reflection-of-a-mistaken-grails-app-domain-model-design/"/><updated>2015-12-22T10:31:21-05:00</updated><id>1f9110f0a04e368520552fa394207196</id><content type="html"><![CDATA[<p>Back in April of this year I took over the development of a client's Grails application. The app is simple:</p>
<ol>
<li>Business ideas flow into it</li>
<li>The ideas are displayed for people to vote on.</li>
<li>The top 3 voted ideas during a given week are deemed the winners. <em>(Still working on this one)</em></li>
</ol>
<p>Initially, once the weekly competition completed, the winning ideas became inaccessible because the view was designed to render only the ideas for the <em>current</em> competition. Yeah, talk about a brain fart.</p>
<!--more-->
<p>My solution was to simply keep track of all winning ideas using a new domain model. Besides, the <em>previous</em> and <em>current</em> competition stats were kept in two properties of the same domain class. It was a putrid situation in need of venting.</p>
<p><em>Great!</em>, I thought. <em>I know exactly what to do</em>. And so I proceeded with a new model similar to this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Competition</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">startDate</span>
</span><span class='line'>    <span class="n">Idea</span> <span class="n">idea</span>
</span><span class='line'>    <span class="n">Integer</span> <span class="n">votes</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">mapping</span> <span class="o">{</span>
</span><span class='line'>        <span class="nl">id:</span> <span class="nl">composite:</span> <span class="o">[</span><span class="s1">&#39;startDate&#39;</span><span class="o">,</span> <span class="s1">&#39;idea&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The hashCode() and equals() dance.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Yeah... the problem should have been obvious to me, but it wasn't. Since each competition is identified by its start date, and each idea can be in a competition only once, I figured this was a logical solution.</p>
<p>And in fact, it works just fine. Recording a vote in a competition is simple:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">example</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Competition</span><span class="o">(</span><span class="nl">idea:</span> <span class="n">idea</span><span class="o">,</span> <span class="nl">startDate:</span> <span class="n">startDate</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">competition</span> <span class="o">=</span> <span class="n">Competition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">example</span><span class="o">)</span> <span class="o">?:</span> <span class="n">competition</span> 
</span><span class='line'>
</span><span class='line'><span class="n">competition</span><span class="o">.</span><span class="na">votes</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1">// or -= 1 for a down-vote</span>
</span><span class='line'><span class="n">competition</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>An existing <code>Competition</code> is used if possible, otherwise a new instance is created. No problem. Except... that a competition is supposed to be able to have multiple ideas. And while the <code>Competition</code> model does <em>work</em>, it's design doesn't reflect its purpose. If my design was by intention for performance or anoother technical reason, I would be content. But the fact remains that I blatantly overlooked the <em>concept</em> of a competition and instead fixated on the <em>implementation</em>. I'm not even going to discuss what I did with the services. I'd clear the room.</p>
<p>The code-smell remained elusive until the day I began working on a new feature and needed a list of the competitions; meaning a list of competition dates.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">competitionDates</span> <span class="o">=</span> <span class="n">Competition</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">distinct</span><span class="o">(</span><span class="s1">&#39;startDate&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> 
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>I had to use <em>DISTINCT</em>.</p>
<p>My days supporting horrid Microsoft Access databases taught me that having to use <em>DISTINCT</em> can be a sign of a... <em>ignorantly de-normalized</em> database. (I resisted the urge to use a more descriptive four-letter word)</p>
<h2>Redemption</h2>
<p>If you're like me, software architecture just rocks your socks off. When a particular problem enters my mind, there's no shutting it up until I solve it. It doesn't care that I go hungry, or that my eyes itch, or that I <em>really</em> need to visit the toilet. It demands my full attention; Emmanuel be damned.</p>
<p>OK, maybe I exaggerated a bit. In this case the solution is rather simple:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Competition</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">startDate</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">ideas:</span> <span class="n">CompetitionIdea</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">mapping</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">id</span> <span class="nl">generator:</span> <span class="s1">&#39;assigned&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;startDate&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">CompetitionIdea</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Idea</span> <span class="n">idea</span>
</span><span class='line'>    <span class="n">Integer</span> <span class="n">votes</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">belongsTo</span> <span class="o">=</span> <span class="o">[</span><span class="nl">competition:</span> <span class="n">Competition</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">idea</span> <span class="nl">unique:</span> <span class="s1">&#39;competition&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now a competition can indeed have multiple ideas.</p>
<p>Aaaahhhhh. Now I can relieve myself in peace <span class="fa fa-smile-o"></span></p>
<h2>Lesson learned</h2>
<p>I don't recall my thought the process when developing the <code>Competition</code> domain model. But because I'm a SQL aficionado, I can only assume that my thinking was too data-centric, too early. By focusing on how to store the data I didn't give enough attention to the concepts the data represents. That's something for me to watch out for in the future.</p>
<p>Speaking of software architecture, have you read any of <a href="http://aosabook.org/en/index.html">The Architecture of Open Source Applications</a> books? As of now there are three books and a fourth is on the way. Written by the developers themselves, the books cover the design of various open source applications. They make for a good read.</p>
]]></content></entry><entry><title type="html"><![CDATA[Grails Domain Class Inheritance]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/grails-domain-class-inheritance/"/><updated>2015-12-22T10:31:21-05:00</updated><id>2e55fc1b4b76223bff36c890792b077d</id><content type="html"><![CDATA[<p>Ever wonder what happens at the database level when you use GORM's domain class inheritance? What's the difference between <em>table-per-hierarchy</em> and <em>table-per-subclass</em> inheritance? That's what this article is all about.</p>
<!--more-->
<p>Grails' database mapping layer GORM provides two ways to achieve domain class inheritance with polymorphic GORM queries. Let me introduce you to the first method, the default in Grails and the right choice for most use cases. Let's give a round of applause to... <em>table-per-hierarchy</em> inheritance!</p>
<h1>Table-per-hierarchy</h1>
<p>Table-per-hierarchy inheritance means that the super-class class and all its sub-classes share the same database table. Take a look at these domain classes:</p>
<figure class='code'><figcaption><span>Employee.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">firstName</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">lastName</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Supervisor.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Supervisor</span> <span class="kd">extends</span> <span class="n">Employee</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">subordinates:</span> <span class="n">Employee</span><span class="o">]</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>An <code>Employee</code> contains <code>firstName</code> and <code>lastName</code> properties. A <code>Supervisor</code> is a subclass of <code>Employee</code> and only adds the ability to have subordinates; simply a collection of <code>Employee</code>s. To get a good understanding of how this works in practice, lets take a peak at the database.</p>
<h2>The database tables</h2>
<p>GORM implements the two domain classes as one database table.</p>
<p><div class="panel panel-default">
    
        <div class="panel-heading">
            <h3 class="panel-title">EMPLOYEE table</h3>
        </div>
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>ID</th>
                    
                        <th>VERSION</th>
                    
                        <th>FIRST_NAME</th>
                    
                        <th>LAST_NAME</th>
                    
                        <th>CLASS</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>1</td>
                    
                        <td>0</td>
                    
                        <td>Dagny</td>
                    
                        <td>Taggart</td>
                    
                        <td>Supervisor</td>
                    
                <tr>
            
                <tr>
                    
                        <td>2</td>
                    
                        <td>0</td>
                    
                        <td>Eddie</td>
                    
                        <td>Willers</td>
                    
                        <td>Employee</td>
                    
                <tr>
            
                <tr>
                    
                        <td>3</td>
                    
                        <td>0</td>
                    
                        <td>James</td>
                    
                        <td>Taggart</td>
                    
                        <td>Supervisor</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p><div class="alert alert-info" role="alert"><p>The <em>class</em> column in the table actually contains the full class name; package name plus class name. I excluded the package name from the above listing.</p>
</div>
</p>
<p>In addition to the <code>EMPLOYEE</code> table, GORM creates the <code>SUPERVISOR_EMPLOYEE</code> table for the <em>one-to-many</em> <code>subordinates</code> association. This table is not critical to inheritance, so I won't discuss it any further. For details on associations read <a href="http://emmanuelrosa.com/articles/grails-domain-class-associations/">this</a> article.</p>
<h2>The queries</h2>
<p>The <code>EMPLOYEE</code> table has a <code>CLASS</code> column which distinguishes which domain class corresponds to the record. This makes it possible to list all employees...</p>
<figure class='code'><figcaption><span>SQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">ID</span><span class="p">,</span> <span class="n">FIRST_NAME</span><span class="p">,</span> <span class="n">LAST_NAME</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">EMPLOYEE</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>GORM</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">employees</span> <span class="o">=</span> <span class="n">Employee</span><span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>... or to list only <code>Supervisors</code>...</p>
<figure class='code'><figcaption><span>SQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">ID</span><span class="p">,</span> <span class="n">FIRST_NAME</span><span class="p">,</span> <span class="n">LAST_NAME</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">EMPLOYEE</span>
</span><span class='line'><span class="k">WHERE</span>  <span class="k">CLASS</span> <span class="o">=</span> <span class="s1">&#39;emmanuel.rosa.grailsinheritanceexample.Supervisor&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>GORM</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">supervisors</span> <span class="o">=</span> <span class="n">Supervisor</span><span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>So far, except for the <code>subordinates</code> association, the <code>Supervisor</code> domain class contains the same properties as the <code>Employee</code> domain class. Lets add an <code>office</code> property. Only supervisors have offices right?</p>
<figure class='code'><figcaption><span>Supervisor.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Supervisor</span> <span class="kd">extends</span> <span class="n">Employee</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">office</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now the <code>EMPLOYEE</code> table has an <code>OFFICE</code> column.</p>
<p><div class="panel panel-default">
    
        <div class="panel-heading">
            <h3 class="panel-title">EMPLOYEE table</h3>
        </div>
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>ID</th>
                    
                        <th>VERSION</th>
                    
                        <th>FIRST_NAME</th>
                    
                        <th>LAST_NAME</th>
                    
                        <th>CLASS</th>
                    
                        <th>OFFICE</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>1</td>
                    
                        <td>0</td>
                    
                        <td>Dagny</td>
                    
                        <td>Taggart</td>
                    
                        <td>Supervisor</td>
                    
                        <td>Operations Suite</td>
                    
                <tr>
            
                <tr>
                    
                        <td>2</td>
                    
                        <td>0</td>
                    
                        <td>Eddie</td>
                    
                        <td>Willers</td>
                    
                        <td>Employee</td>
                    
                        <td>null</td>
                    
                <tr>
            
                <tr>
                    
                        <td>3</td>
                    
                        <td>0</td>
                    
                        <td>James</td>
                    
                        <td>Taggart</td>
                    
                        <td>Supervisor</td>
                    
                        <td>Basement</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p><div class="alert alert-warning" role="alert"><p>By default domain class properties are not null-able (NOT NULL in SQL speak). I'm using an H2 database for this demonstration and apparently the office field is not being set to NOT NULL. If I were to use my favorite DBMS PostgreSQL, it would reject the Eddie Willers record. So I'm going to pretend that NOT NULL is working properly and that the <code>office</code> field should be as-is; not null-able.</p>
</div>
</p>
<p>What this means in practice is that it's now impossible to create instances of the <code>Employee</code> domain class because <code>Employee</code>s don't have an office, yet the office field cannot be NULL. Don't worry, GORM offers a way out: <em>table-per-subclass</em> inheritance.</p>
<h1>Table-per-subclass</h1>
<p>Table-per-subclass means that a subclass is represented in the database as a table consisting of <strong>the <em>difference</em> between itself and its super-class</strong>. First, the default inheritance stragety must be changed.</p>
<figure class='code'><figcaption><span>Employee.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">mapping</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">tablePerHierarchy</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>With the change described above applied, the <code>OFFICE</code> column is moved to a separate table.</p>
<p><div class="panel panel-default">
    
        <div class="panel-heading">
            <h3 class="panel-title">EMPLOYEE table</h3>
        </div>
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>ID</th>
                    
                        <th>VERSION</th>
                    
                        <th>FIRST_NAME</th>
                    
                        <th>LAST_NAME</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>1</td>
                    
                        <td>0</td>
                    
                        <td>Dagny</td>
                    
                        <td>Taggart</td>
                    
                <tr>
            
                <tr>
                    
                        <td>2</td>
                    
                        <td>0</td>
                    
                        <td>Eddie</td>
                    
                        <td>Willers</td>
                    
                <tr>
            
                <tr>
                    
                        <td>3</td>
                    
                        <td>0</td>
                    
                        <td>James</td>
                    
                        <td>Taggart</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p><div class="panel panel-default">
    
        <div class="panel-heading">
            <h3 class="panel-title">SUPERVISOR table</h3>
        </div>
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>ID</th>
                    
                        <th>OFFICE</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>1</td>
                    
                        <td>Operations Suite</td>
                    
                <tr>
            
                <tr>
                    
                        <td>3</td>
                    
                        <td>Basement</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>Notice that <code>Supervisors</code> have a record in the <code>SUPERVISOR</code> table <em>and</em> in the <code>EMPLOYEE</code> table. In addition, the record IDs are shared between both tables. The relationship at the database level is a <em>one-to-one</em>.  This means querying for <code>Supervisor</code>s in SQL requires a table join.</p>
<figure class='code'><figcaption><span>SQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">EMPLOYEE</span><span class="p">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">FIRST_NAME</span><span class="p">,</span> <span class="n">LAST_NAME</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">SUPERVISOR</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">EMPLOYEE</span> 
</span><span class='line'>       <span class="k">ON</span> <span class="n">SUPERVISOR</span><span class="p">.</span><span class="n">ID</span> <span class="o">=</span> <span class="n">EMPLOYEE</span><span class="p">.</span><span class="n">ID</span>
</span></code></pre></td></tr></table></div></figure>
<h1>The end</h1>
<p>Well, this wraps up this discussion on Grails polymorphic sub-classing. You just learned about the differences between GORM'S two methods of inheritance and what they look like at the database level. Want to play around with the code? Just clone the Mercurial repository as shown below:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>hg clone ssh://hg@bitbucket.org/erosa/grails-inheritance-example
</span></code></pre></td></tr></table></div></figure>
]]></content></entry><entry><title type="html"><![CDATA[GORM for SQLaddicts: SELECT clause]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/"/><updated>2015-12-18T17:01:48-05:00</updated><id>3e21f9c92e61ee0feac7ce7da1942ba3</id><content type="html"><![CDATA[<p>This article in the GORM for SQLaddicts series describes how to choose which domain class properties to return in your GORM query. It's the equivalent of the SQL <em>select</em> clause.</p>
<!--more-->
<p><h1>GORM for SQLaddicts</h1>
<p>Welcome to the GORM for SQLaddicts series. A collection of articles dedicated to experienced SQL programmers who want to learn how to query GORM, the Grails object-relational mapper.</p>
<p>Throughout this series you will learn how to</p>
<ol>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/">WHERE - Add restrictions to a query</a></li>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/">FROM - Work with associations and joins</a></li>
<li><strong>SELECT - Return multiple properties and/or domain classes</strong></li>
</ol>
<h2>Getting started</h2>
<p>To follow along you'll need <a href="https://grails.org/">Grails</a> 3.0.5 and <a href="https://www.mercurial-scm.org/">Mercurial</a>. With Grails and Mercurial installed you can download the source code and run the Grails console.</p>
<h3>Setup</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hg clone ssh://hg@bitbucket.org/erosa/gormtut
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gormtut 
</span><span class='line'><span class="nv">$ </span>grails console
</span></code></pre></td></tr></table></div></figure>
<p>Once the Grails console window appears, copy &amp; paste the following code into the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.emmanuelrosa.gormtut.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withNewSession</span> <span class="o">{</span> <span class="n">session</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// Run GORM queries within this Closure.</span>
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now you're set up to execute GORM queries. All you need to do is write the query within the <code>Closure</code> and run the code (Script->Run or Command-R).</p>
<h3>Domain classes</h3>
<p>The examples in this article reference the <code>Vendor</code>, <code>Address</code>, and <code>Product</code> domain classes. See the diagram below to see how the domain classes are related to each other.</p>
<p><img src="http://emmanuelrosa.com/images/sqladdicts-domains-dd608e6240ea469473399853225b6c94.svg" alt="Domain class diagram" /></p>
</p>
<p>Throughout this series I've dedicated each article to a single SQL clause: (see the
<a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/"><em>where</em></a> and <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/"><em>from</em></a> articles).
And as you may have noticed, it's impossible to use only one of these SQL clauses in isolation. The same applies to GORM. Both previous articles utilize the <em>select</em> clause in some way. Lets learn about the details.</p>
<h1>SELECTing properties</h1>
<p>In the <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/"><em>where</em></a> clause article I said not to be concerned with the <em>select</em> clause just yet. Now the time has come to figure this thing out. Say you want to get a list of all the <code>Vendor</code> names. In SQL you can accomplish this with the following query:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">vendor</span>
</span></code></pre></td></tr></table></div></figure>
<p>Thus far, your queries return domain class instances. As an example, you <em>could</em> list all of the <code>Vendor</code> names by getting all of the <code>Vendor</code> instances and then using Groovy to grab the <code>name</code> properties:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">findAll</span><span class="o">()*.</span><span class="na">name</span>
</span></code></pre></td></tr></table></div></figure>
<p>But lets face it, you can do better. Enough with the suspense. Here's the HQL:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">Vendor</span>
</span></code></pre></td></tr></table></div></figure>
<p>The HQL is straight-forward: it returns the <code>name</code> property of all the <code>Vendor</code> domain class instances. The output looks like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="s1">&#39;Bears Emporium&#39;</span><span class="o">,</span> <span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Furball Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="s1">&#39;Jouets et ours&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Lets add another property:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">address</span> <span class="k">FROM</span> <span class="n">Vendor</span>
</span></code></pre></td></tr></table></div></figure>
<p>The output looks like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">1</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears Emporium&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">2</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">3</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Furball Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">4</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">5</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Jouets et ours&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">6</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>The output is rows of <code>List</code>s, with each <code>List</code> containing two elements: the <code>Vendor</code> <code>name</code> and <code>Address</code>. Interesting huh? How about returning an <code>Address</code> property, such as <code>country</code>, instead?</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">address</span><span class="p">.</span><span class="n">country</span> <span class="k">FROM</span> <span class="n">Vendor</span>
</span></code></pre></td></tr></table></div></figure>
<p>The output of which is:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="s1">&#39;USA&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears Emporium&#39;</span><span class="o">,</span> <span class="s1">&#39;USA&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;USA&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Furball Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;USA&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="s1">&#39;England&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Jouets et ours&#39;</span><span class="o">,</span> <span class="s1">&#39;France&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Cool! Look how easy that was! Lets try one more thing: add the <code>Vendor.products</code> property.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">address</span><span class="p">.</span><span class="n">country</span><span class="p">,</span> <span class="n">products</span> <span class="k">FROM</span> <span class="n">Vendor</span>
</span></code></pre></td></tr></table></div></figure>
<p><div class="alert alert-danger" role="alert">org.springframework.jdbc.BadSqlGrammarException: Hibernate operation: could not prepare statement; bad SQL grammar</div>
</p>
<p>That didn't go so well. The issue is that <code>Vendor</code> has a one-to-many relationship to <code>Product</code> through the <code>products</code> association. This means the <code>products</code> property is a collection and thus requires a different approach. I'll come back to this. Lets do some criteria and where queries.</p>
<h2>Criteria</h2>
<p>The equivalent of a <em>select</em> clause in criteria (and where) queries is called a projection. Yea! Yes, I'm talking about those mysterious projections you've seen plastered all over Stack Overflow.</p>
<p>Once you see a projection in action, it will click.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;address&#39;</span><span class="o">)</span>           
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Notice how each <em>selected</em> property corresponds to a call to <code>HibernateCriteriaBuilder.property(String propertyName)</code>. Mystery solved <span class="fa fa-smile-o"< /span></p>
<p>What's with the <code>println</code>? The problem is this: The <code>Address</code> instances are lazy-loaded when the query executes: you get a proxy rather than actual <code>Address</code> instances. The proxy then retrieves the data when you try to access it, as will happen when the Grails console attempts to print the result. The <code>println</code> forces the proxy to <em>resolve</em> within the <code>withNewSession(Closure)</code> Closure preventing this:</p>
<p><div class="alert alert-danger" role="alert">org.hibernate.LazyInitializationException: could not initialize proxy - no Session</div>
</p>
<p>For clarity, I'll exclude the <code>println</code> from the remaining examples. Lets replicate the HQL which returns the <code>Vendor.name</code> and <code>Vendor.address.country</code> properties.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       
</span><span class='line'>       <span class="n">address</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">property</span><span class="o">(</span><span class="s1">&#39;country&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="o">}</span>          
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ah, this is different. To access a nested property:</p>
<ol>
<li>call a method named like the first property (ex. <code>address(Closure)</code>).</li>
<li>Within the <code>Closure</code> call <code>property(String)</code> with a property name (ex. <code>country</code>) relative to the property represented by the method call (ex. <code>address</code>).</li>
</ol>
<p>It takes some getting used to, but it's not so bad. So, what can a where query do for you?</p>
<h2>Where query</h2>
<p>Projections work differently in where queries. Up first are the <code>name</code> and <code>address</code> properties.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span>
</span><span class='line'>    <span class="o">.</span><span class="na">where</span> <span class="o">{}</span>
</span><span class='line'>   <span class="o">.</span><span class="na">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;address&#39;</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>I modified the where query syntax I normally use to clarify the fact that in where queries the projections are specified <em>outside</em> of the <code>GormEntity.where(Closure)</code> <code>Closure</code>. Otherwise, the projections <code>Closure</code> is the same as the one used in the equivalent criteria query. But, there's a caveat. Lets see what happens when you try to project <code>address.country</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span>
</span><span class='line'>    <span class="o">.</span><span class="na">where</span> <span class="o">{}</span>
</span><span class='line'>   <span class="o">.</span><span class="na">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       
</span><span class='line'>       <span class="n">address</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">property</span><span class="o">(</span><span class="s1">&#39;country&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="o">}</span>          
</span><span class='line'>   <span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>It doesn't work. What a downer. In short, projections are just better supported by criteria queries.</p>
<p>Earlier on you tried selecting/projecting the <code>Vendor.products</code> property and got a nasty error. Lets discover what you can do to handle such <code>Collection</code> properties.</p>
<h1>SELECTing collections</h1>
<p>Since you know SQL, the easiest way to learn how to deal with <code>Collections</code> is to look at what the output looks like:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">1</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">2</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">3</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">4</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">5</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">6</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">7</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">8</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Keeping in mind that a <code>Vendor</code> has a one-to-many relationship with <code>Product</code>, you can see in the table-like output above what looks like an... <em>inner join</em>! Do you see it? OK, let me show you the query that produced that output.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">vnd</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">product</span> <span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">vnd</span><span class="p">.</span><span class="n">products</span> <span class="k">AS</span> <span class="n">product</span>
</span></code></pre></td></tr></table></div></figure>
<p>By joining the <code>Product</code> domain class through the existing <code>Vendor.products</code> association each related <code>Product</code> becomes available in the query. Note that to select the <code>Vendor.name</code> the domain class alias (ex <code>vnd</code>) must be used. Joining is covered thoroughly in the <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/"><em>from clause</em></a> article.</p>
<p>Lets build on this and select a <code>Product</code> property.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">vnd</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">name</span> <span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">vnd</span><span class="p">.</span><span class="n">products</span> <span class="k">AS</span> <span class="n">product</span>
</span></code></pre></td></tr></table></div></figure>
<p>Complimentary output:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="s1">&#39;8 inch teddy bear&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Bears R Us&#39;</span><span class="o">,</span> <span class="s1">&#39;18 inch teddy bear&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Fish bean bag toy&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Bird bean bag toy&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Rabbit bean bag toy&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Doll House Inc.&#39;</span><span class="o">,</span> <span class="s1">&#39;Raggedy Ann&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="s1">&#39;King doll&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;Fun and Games&#39;</span><span class="o">,</span> <span class="s1">&#39;Queen doll&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Yep, it's that easy. Moving on...</p>
<h2>Criteria query</h2>
<p>I'll tell you right off the bat that you cannot project the associated domain classes like you can with HQL. For instance, neither one of these queries will work:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// This won&#39;t work.</span>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;products&#39;</span><span class="o">)</span>           
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Neither will this.</span>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">createAlias</span><span class="o">(</span><span class="s1">&#39;products&#39;</span><span class="o">,</span> <span class="s1">&#39;product&#39;</span><span class="o">)</span>
</span><span class='line'>   
</span><span class='line'>   <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;product&#39;</span><span class="o">)</span>           
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>But, you can project an association's property. This works beautifully:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       
</span><span class='line'>       <span class="n">products</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">property</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">)</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Since where query projections do not support nested properties, I'm closing the curtain.</p>
<h1>Conclusion</h1>
<p>I hope you've enjoyed the GORM for SQLaddicts series so far. In this article you learned how to select properties, and association properties using HQL's <em>select</em> clause and criteria and where query projections. I hope you've enjoyed this series of articles.</p>
]]></content></entry><entry><title type="html"><![CDATA[GORM for SQLAddicts: FROM Clause]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/"/><updated>2015-12-11T12:40:21-05:00</updated><id>dacc9dc3c1a40ddca21c242c74cbb0ab</id><content type="html"><![CDATA[<p>When you learned how to specify GORM query restrictions, the equivalent of the SQL WHERE clause, we only queried a single domain class. In this article you'll learn how to join multiple domain classes into your queries.</p>
<!--more-->
<p><h1>GORM for SQLaddicts</h1>
<p>Welcome to the GORM for SQLaddicts series. A collection of articles dedicated to experienced SQL programmers who want to learn how to query GORM, the Grails object-relational mapper.</p>
<p>Throughout this series you will learn how to</p>
<ol>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/">WHERE - Add restrictions to a query</a></li>
<li><strong>FROM - Work with associations and joins</strong></li>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/">SELECT - Return multiple properties and/or domain classes</a></li>
</ol>
<h2>Getting started</h2>
<p>To follow along you'll need <a href="https://grails.org/">Grails</a> 3.0.5 and <a href="https://www.mercurial-scm.org/">Mercurial</a>. With Grails and Mercurial installed you can download the source code and run the Grails console.</p>
<h3>Setup</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hg clone ssh://hg@bitbucket.org/erosa/gormtut
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gormtut 
</span><span class='line'><span class="nv">$ </span>grails console
</span></code></pre></td></tr></table></div></figure>
<p>Once the Grails console window appears, copy &amp; paste the following code into the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.emmanuelrosa.gormtut.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withNewSession</span> <span class="o">{</span> <span class="n">session</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// Run GORM queries within this Closure.</span>
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now you're set up to execute GORM queries. All you need to do is write the query within the <code>Closure</code> and run the code (Script->Run or Command-R).</p>
<h3>Domain classes</h3>
<p>The examples in this article reference the <code>Vendor</code>, <code>Address</code>, <code>Customer</code>, <code>PurchaseOrder</code>, and <code>Product</code> domain classes. See the diagram below to see how the domain classes are related to each other.</p>
<p><img src="http://emmanuelrosa.com/images/sqladdicts-domains-dd608e6240ea469473399853225b6c94.svg" alt="Domain class diagram" /></p>
</p>
<p>The GORM for SQLAddicts series is not for the lazy. You gotta get your fingers cramped to get the best out of it. If your behind is not tingling, fast asleep, you've been getting too much exercise. Sit back down, get the Grails console back up, and lets get to it.</p>
<h1>SQL vs GORM joins</h1>
<p>In SQL, when you need to reference more that one table, you specify the other table(s) and  how they are to be joined.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> 
</span><span class='line'><span class="k">FROM</span>   <span class="n">TABLE_A</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">TABLE_B</span>
</span><span class='line'>       <span class="k">ON</span> <span class="n">TABLE_A</span><span class="p">.</span><span class="n">FOREIGN_KEY</span> <span class="o">=</span> <span class="n">TABLE_B</span><span class="p">.</span><span class="n">ID</span>
</span></code></pre></td></tr></table></div></figure>
<p>GORM is different.</p>
<p>GORM automatically <em>inner</em> joins domain classes according to their associations. A GORM query can alter the join <em>type</em> (left, right, or Cartesian) but cannot join un-associated domain classes. Lets explore this with an <em>inner join</em> using HQL.</p>
<h2>An example</h2>
<p>Let's say you want to get all the <code>Vendor</code>s in the state of Michigan. The first step is to check which associations you have available in the domain classes involved. Here's the source code.</p>
<figure class='code'><figcaption><span>Vendor.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Vendor</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">Address</span> <span class="n">address</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">products:</span> <span class="n">Product</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Address.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">street</span> 
</span><span class='line'>    <span class="n">String</span> <span class="n">city</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">state</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">zip</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">country</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">state</span> <span class="nl">nullable:</span> <span class="kc">true</span> 
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>The <code>Vendor.address</code> association provides a many-to-one association from <code>Vendor</code> to <code>Address</code>. This means you can join <code>Address</code> and <code>Vendor</code> and then get to the <code>state</code> property via the <code>Address</code>. But before you can create the join you need to create an alias.</p>
<h3>Create an alias</h3>
<p>The <em>inner join</em> syntax is:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">domainClassAlias</span><span class="p">.</span><span class="n">associationProperty</span> <span class="k">AS</span> <span class="k">alias</span>
</span></code></pre></td></tr></table></div></figure>
<p>So the first thing you need is a domain class alias: an alias for the domain class containing the association property. The <code>Vendor</code> domain class contains the <code>address</code> association property, so you need an alias for <code>Vendor</code>. Just like SQL, in HQL an alias is created with <em>AS</em>.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span>
</span></code></pre></td></tr></table></div></figure>
<p>

<blockquote>
    <p>That was easy.</p>
    <footer>
        
            <strong>Staples, Inc</strong>
        
        
    </footer>
</blockquote></p>
<p>Now that you have the <code>vnd</code> alias for <code>Vendor</code> you're ready to create the join.</p>
<h3>Create the join</h3>
<p>Using the <code>vnd</code> alias let's create an <em>inner join</em>.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">vnd</span><span class="p">.</span><span class="n">address</span> <span class="k">AS</span> <span class="n">addr</span>
</span></code></pre></td></tr></table></div></figure>
<p>Go ahead and run the query in the Grails console. The output looks like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">1</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">1</span><span class="o">],</span> 
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">2</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">2</span><span class="o">],</span> 
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">3</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">3</span><span class="o">],</span> 
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">4</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">4</span><span class="o">],</span> 
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">5</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">5</span><span class="o">],</span> 
</span><span class='line'>    <span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">6</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Address</span> <span class="o">:</span> <span class="mi">6</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p><div class="alert alert-info" role="alert"><p>To learn how to run an HQL query, see the SQLaddicts <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/"><em>where</em> clause</a> article.</p>
</div>
</p>
<p>Interestingly, the query returns a list of lists containing the <code>Vendor</code> and <code>Address</code>. You may have expected a list of <code>Vendor</code>s. The remedy is the topic of another article but I'll go ahead and introduce it since I'd be helpful right now: You need to add a <em>select</em> clause.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">vnd</span> <span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">vnd</span><span class="p">.</span><span class="n">address</span> <span class="k">AS</span> <span class="n">addr</span>
</span></code></pre></td></tr></table></div></figure>
<p>Just <em>select</em> the <code>vnd</code> alias and you'll get a list of <code>Vendor</code>s.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">1</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">2</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">3</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">4</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">5</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Vendor</span> <span class="o">:</span> <span class="mi">6</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Because it makes sense to do so, although it's beyond the scope of this article I'll go ahead and continue using the <em>select</em> clause in the simplest way possible for the remainder of this article.</p>
<p>Unlike SQL, there's no need to specify which fields to join on. In fact, HQL doesn't support the <em>ON</em> clause. Instead, you simply specify which association to use for the join. GORM does the rest. The domain class joined by the association is then given an alias. In this example, <code>addr</code>. Now that you have the join created you can finally add the restriction with a <em>where</em> clause.</p>
<h3>Create the restriction</h3>
<p>To create the restriction on the state of Michigan, use the <code>addr</code> alias to access the <code>state</code> property.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">vnd</span> <span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">AS</span> <span class="n">vnd</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">vnd</span><span class="p">.</span><span class="n">address</span> <span class="k">AS</span> <span class="n">addr</span> <span class="k">WHERE</span> <span class="n">addr</span><span class="p">.</span><span class="k">state</span> <span class="o">=</span> <span class="s1">&#39;MI&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p><div class="alert alert-info" role="alert"><p>Unfamiliar with GORM restrictions? See the article <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/">GORM for SQLaddicts: WHERE Clause</a>.</p>
</div>
</p>
<p>Where and criteria queries perform the join implicitly, but in HQL you need to explicitly join the domain classes to create aliases. Speaking of where and criteria queries...</p>
<h1>Inner join</h1>
<p>Now that you know how to create an <em>inner join</em> in HQL, let's do the same with where and criteria queries. Dynamic finders don’t support joins so they're not discussed in this article. Where queries are up first.</p>
<h2>Where query</h2>
<p>To create a restriction on a property of an association, simply use Groovy's property access.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">address</span><span class="o">.</span><span class="na">state</span> <span class="o">==</span> <span class="s1">&#39;MI&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>In the query above, the <code>state</code> property of the <code>address</code> association is used in a restriction. And of course, the <code>address</code> association is in the <code>Vendor</code> domain class. Notice that unlike HQL, there's no need to create an alias. You simply use the association's property name. Let's see the equivalent criteria query.</p>
<h2>Criteria query</h2>
<p>To create a restriction on a property of an association, you need to...</p>
<ol>
<li>Call a method with the same name as the association.</li>
<li>Provide a <code>Closure</code> as method's argument.</li>
<li>Within the <code>Closure</code> use any of the association's properties.</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">address</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">eq</span><span class="o">(</span><span class="s1">&#39;state&#39;</span><span class="o">,</span> <span class="s1">&#39;MI&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>In the query shown above, the <code>address(Closure)</code> method informs the <code>HibernateCriteriaBuilder</code> that properties accessed within the <code>Closure</code> should be looked up in the <code>Vendor</code>'s <code>Address</code>. The <code>HibernateCriteriaBuilder.eq(String, Object)</code> method called within the <code>Closure</code> will use the <code>state</code> property of the <code>Address</code> when creating the restriction.</p>
<p>The where and criteria queries you just learned about don't show any indication of joins, unlike the HQL query. That's about to change. Left outer join is next.</p>
<h1>Left outer join</h1>
<p>To demonstrate a left outer join lets query for <code>Customer</code>s lacking a <code>PurchaseOrder</code>. Here are the domain classes involved.</p>
<figure class='code'><figcaption><span>Customer.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">Address</span> <span class="n">address</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">contact</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">email</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">orders:</span> <span class="n">PurchaseOrder</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>PurchaseOrder.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">PurchaseOrder</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">orderDate</span>
</span><span class='line'>    <span class="n">Customer</span> <span class="n">customer</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">items:</span> <span class="n">Item</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>To find the <code>Customer</code>s without a <code>PurchaseOrder</code> you'll use the <code>Customer.orders</code> association. Lets do this in HQL first.</p>
<h2>HQL query</h2>
<p>The HQL query will likely bore you.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">cust</span> <span class="k">FROM</span> <span class="n">Customer</span> <span class="k">AS</span> <span class="n">cust</span> <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">cust</span><span class="p">.</span><span class="n">orders</span> <span class="k">AS</span> <span class="n">ord</span> <span class="k">WHERE</span> <span class="n">ord</span> <span class="o">=</span> <span class="k">null</span>
</span></code></pre></td></tr></table></div></figure>
<p>When you run the query you'll see there's only one qualifying <code>Customer</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Customer</span> <span class="o">:</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>By default, where and criteria queries use an inner join. However, the join type of a criteria query can be changed to a left outer join. Unfortunately, the join type of a where query cannot be changed, so this is as far as we can get with where queries.</p>
<h2>Criteria query</h2>
<p>First, import the Hibernate join type you intend to use. I'm going to import all of them with the following statement:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">JoinType</span><span class="o">.*</span>
</span></code></pre></td></tr></table></div></figure>
<p>Next, create an alias for the <code>orders</code> association while specifying the join type.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">JoinType</span><span class="o">.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Customer</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">createAlias</span><span class="o">(</span><span class="s1">&#39;orders&#39;</span><span class="o">,</span> <span class="s1">&#39;ord&#39;</span><span class="o">,</span> <span class="n">LEFT_OUTER_JOIN</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>An alias is created with <code>HibernateCriteriaBuilder.createAlias(String associationPath, String alias, int joinType)</code>. And finally, use the <code>ord</code> alias with `HibernateCriteriaBuilder.isNull(String) to create the <em>is null</em> restriction.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">JoinType</span><span class="o">.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Customer</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">createAlias</span><span class="o">(</span><span class="s1">&#39;orders&#39;</span><span class="o">,</span> <span class="s1">&#39;ord&#39;</span><span class="o">,</span> <span class="n">LEFT_OUTER_JOIN</span><span class="o">)</span>
</span><span class='line'>    <span class="n">isNull</span><span class="o">(</span><span class="s1">&#39;ord.id&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Bonus: Lets cheat</h2>
<p>The <em>null check</em> type of query used in the example is quite common in SQL. GORM offers another way to achieve the same thing. By looking for <code>Customer</code>s with an <code>orders</code> collection of size 0, you can get the same result without the left outer join.</p>
<figure class='code'><figcaption><span>HQL</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">FROM</span> <span class="n">Customer</span> <span class="k">WHERE</span> <span class="k">size</span><span class="p">(</span><span class="n">orders</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Where</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Customer</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">orders</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Criteria</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Customer</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sizeEq</span><span class="o">(</span><span class="s1">&#39;orders&#39;</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Up next is the uncommon but sometimes useful Cartesian product/cross join.</p>
<h2>Cartesian/cross join</h2>
<p>For a cross join (Cartesian product) you’re down to HQL. It's unsupported by where and criteria queries. Similar to SQL, you simply need to list the domain classes separated by a comma:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">FROM</span> <span class="n">Vendor</span> <span class="n">AS</span> <span class="n">vnd</span><span class="o">,</span> <span class="n">Product</span> <span class="n">AS</span> <span class="n">prd</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>It's that simple.</p>
<h1>Association direction</h1>
<p>Because GORM joins domain classes based on their associations, the associations impact how you can write your queries. Something to consider is the direction of your associations. Lets say there’s a unidirectional many-to-one association from <code>Product</code> to <code>Vendor</code>.</p>
<figure class='code'><figcaption><span>Product.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">description</span>
</span><span class='line'>    <span class="n">BigDecimal</span> <span class="n">price</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">belongsTo</span> <span class="o">=</span> <span class="o">[</span><span class="nl">vendor:</span> <span class="n">Vendor</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Vendor.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Vendor</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">Address</span> <span class="n">address</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>To get a list of <code>Vendor</code>s who don’t have <code>Product</code>s, you’d have to use a right outer join like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">vnd</span> 
</span><span class='line'><span class="k">FROM</span> <span class="n">Product</span> <span class="k">AS</span> <span class="n">prd</span> <span class="k">RIGHT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="n">prd</span><span class="p">.</span><span class="n">vendor</span> <span class="k">AS</span> <span class="n">vnd</span> 
</span><span class='line'><span class="k">WHERE</span> <span class="n">prd</span><span class="p">.</span><span class="n">id</span> <span class="k">is</span> <span class="k">null</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>It’s possible to do a right outer join with a criteria query, but you’d have to use a <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/">projection</a> to return a <code>Vendor</code> property, such as its <code>id</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">JoinType</span><span class="o">.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">createAlias</span> <span class="s1">&#39;vendor&#39;</span><span class="o">,</span> <span class="s1">&#39;vnd&#39;</span><span class="o">,</span> <span class="n">RIGHT_OUTER_JOIN</span>
</span><span class='line'>    
</span><span class='line'>    <span class="n">projections</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">property</span> <span class="s1">&#39;vnd.id&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    
</span><span class='line'>    <span class="n">isNull</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Alternatively, a bidirectional association simplifies the queries. For instance, with a <em>one-to-many</em> association from <code>Vendor</code> to <code>Product</code>...</p>
<figure class='code'><figcaption><span>Vendor.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">Vendor</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">products:</span> <span class="n">Product</span><span class="o">]</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>You get the option of using a where query.</p>
<figure class='code'><figcaption><span>HQL</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">FROM</span> <span class="n">Vendor</span> <span class="k">WHERE</span> <span class="k">size</span><span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Where</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">products</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Criteria</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sizeEq</span><span class="o">(</span><span class="s1">&#39;products&#39;</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h1>Conclusion</h1>
<p>In this article you learned about joining domain classes in GORM queries, and you even learned a tiny little bit about the HQL <em>select</em> clause.
Need a refresher on the <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/"><em>where</em> clause</a>?
Want to learn about <em>select</em>'ing with GORM queries? There's an <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/">article</a> for that.</p>
]]></content></entry><entry><title type="html"><![CDATA[GORM for SQLaddicts: WHERE Clause]]></title><link rel="alternative" href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-where-clause/"/><updated>2015-12-10T18:48:51-05:00</updated><id>3c50af512f1f96b65c4c96102a2696c1</id><content type="html"><![CDATA[<p>Learn how to implement the equivalent of a SQL WHERE clause using an HQL query, criteria query, where query, and dynamic finder. <!--more-->You'll save time by learning GORM using the SQL concepts you already know.</p>
<p><h1>GORM for SQLaddicts</h1>
<p>Welcome to the GORM for SQLaddicts series. A collection of articles dedicated to experienced SQL programmers who want to learn how to query GORM, the Grails object-relational mapper.</p>
<p>Throughout this series you will learn how to</p>
<ol>
<li><strong>WHERE - Add restrictions to a query</strong></li>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/">FROM - Work with associations and joins</a></li>
<li><a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/">SELECT - Return multiple properties and/or domain classes</a></li>
</ol>
<h2>Getting started</h2>
<p>To follow along you'll need <a href="https://grails.org/">Grails</a> 3.0.5 and <a href="https://www.mercurial-scm.org/">Mercurial</a>. With Grails and Mercurial installed you can download the source code and run the Grails console.</p>
<h3>Setup</h3>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hg clone ssh://hg@bitbucket.org/erosa/gormtut
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gormtut 
</span><span class='line'><span class="nv">$ </span>grails console
</span></code></pre></td></tr></table></div></figure>
<p>Once the Grails console window appears, copy &amp; paste the following code into the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.emmanuelrosa.gormtut.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withNewSession</span> <span class="o">{</span> <span class="n">session</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// Run GORM queries within this Closure.</span>
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now you're set up to execute GORM queries. All you need to do is write the query within the <code>Closure</code> and run the code (Script->Run or Command-R).</p>
<h3>Domain classes</h3>
<p>The examples in this article reference the <code>Product</code>, <code>Vendor</code>, and <code>Address</code> domain classes. See the diagram below to see how the domain classes are related to each other.</p>
<p><img src="http://emmanuelrosa.com/images/sqladdicts-domains-dd608e6240ea469473399853225b6c94.svg" alt="Domain class diagram" /></p>
</p>
<p>You'll begin with HQL due to it's similarity to SQL. From there, you'll learn about criteria queries, where queries, and finally dynamic finders. Let's get started.</p>
<h1>HQL</h1>
<p>HQL is a natural way to begin learning GORM queries simply because it makes the most of the SQL you already know. The significant differences in HQL are noticeable in the <a href="/articles/gorm-for-sqladdicts-select-clause/">GORM for SQLaddicts: SELECT clause</a> and <a href="/articles/gorm-for-sqladdicts-from-clause/">GORM for SQLAddicts: FROM Clause</a> articles, but there are still some worth mentioning now.</p>
<h2>Anatomy</h2>
<p>The table below compares a SQL query to it's HQL equivalent. Take a look and see how many differences you can identify.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>SQL</th>
                    
                        <th>HQL</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td><span style="font-family: monospace">SELECT *</span></td>
                    
                        <td><span style="font-family: monospace"></span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">FROM product</span></td>
                    
                        <td><span style="font-family: monospace">FROM Product</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">WHERE name = '12 in teddy bear'</span></td>
                    
                        <td><span style="font-family: monospace">WHERE name = '12 in teddy bear'</span></td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>There are a whopping 2 differences: the <em>Product</em> in the <em>from</em> clause is case-sensitive and the <em>select</em> clause is missing.</p>
<h3>Case sensitivity</h3>
<p>An important difference between SQL and HQL is that in SQL you select from <em>tables</em> while in HQL you select from <em>domain classes</em>. Because you're dealing with classes names rather than tables names, the names are case-sensitive.</p>
<h3>Columns vs Objects</h3>
<p>

<blockquote>
    <p>So... how do I select properties?</p>
    <footer>
        
            <strong>You</strong>
        
        
    </footer>
</blockquote></p>
<p>The <em>select</em> clause, which is covered in the <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/"><em>select clause</em></a> article, can be used to return rows of domain class properties. The important thing to know for now is that while SQL queries return rows of columns as you're accustomed to, without a <em>select</em> clause HQL queries return domain class instances instead. Allow me to demonstrate.</p>
<h4>SQL</h4>
<p>Take the following SQL query.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="n">SELECT *
FROM product
WHERE name = '12 inch teddy bear' </span>
</span></code></pre></td></tr></table></div></figure>
<p>To run the query, create the following script in the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.emmanuelrosa.gormtut.*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.transform.AliasToEntityMapResultTransformer</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withNewSession</span> <span class="o">{</span> <span class="n">session</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// Run GORM queries within this Closure.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">createSQLQuery</span><span class="o">(</span><span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">        SELECT *</span>
</span><span class='line'><span class="s2">        FROM product</span>
</span><span class='line'><span class="s2">        WHERE name = &#39;12 inch teddy bear&#39;</span>
</span><span class='line'><span class="s2">        &quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">setResultTransformer</span><span class="o">(</span><span class="k">new</span> <span class="n">AliasToEntityMapResultTransformer</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>You're using Hibernate's <code>Session.createSQLQuery(String)</code> to create a SQL query wthich is represented by a <code>SQLQuery</code> instance. The <code>AliasToEntityMapResultTransformer</code> is used to convert each row from a <code>List</code> into a <code>Map</code>, making it possible to access each column by name. Execute the script to see the output, which when formatted for clarity looks like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;ID&#39;</span><span class="o">:</span><span class="mi">2</span><span class="o">,</span> <span class="s1">&#39;PRICE&#39;</span><span class="o">:</span><span class="mf">8.99</span><span class="o">,</span> <span class="s1">&#39;NAME&#39;</span><span class="o">:</span><span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">,</span> <span class="s1">&#39;VERSION&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;DESCRIPTION&#39;</span><span class="o">:</span><span class="s1">&#39;12 inch teddy bear, comes with cap and jacket&#39;</span><span class="o">,</span> <span class="s1">&#39;VENDOR_ID&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>The output is a <code>List</code> of <code>Map</code>s containing each of the selected columns. Without the <code>AliasToEntityMapResultTransformer</code> the output would have been a <code>List</code> of <code>List</code>s. Now lets do the equivalent with a HQL query lacking a <em>select</em> clause.</p>
<h4>HQL</h4>
<p>To see what HQL does without a <em>select</em> clause take the HQL query...</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="n">FROM Product
WHERE name = '12 inch teddy bear' </span>
</span></code></pre></td></tr></table></div></figure>
<p>...and place it in the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.emmanuelrosa.gormtut.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vendor</span><span class="o">.</span><span class="na">withNewSession</span> <span class="o">{</span> <span class="n">session</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// Run GORM queries within this Closure.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Product</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">    FROM Product</span>
</span><span class='line'><span class="s2">    WHERE name = &#39;12 inch teddy bear&#39; </span>
</span><span class='line'><span class="s2">    &quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Then execute the script. The output looks like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p><div class="alert alert-warning" role="alert"><p>The output is a <code>List</code> of <code>Product</code>s not a <code>Map&lt;Class, Integer&gt;</code>.</p>
</div>
</p>
<h2>Executing an HQL query</h2>
<p>The <code>GormEntity</code> trait adds a number of methods to domain classes for executing HQL queries. To keep things simple, I'll stick to <code>executeQuery(String query)</code>, <code>executeQuery(String query, Map args)</code>, <code>find(String query)</code> and <code>find(String query, Map params)</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="s2">&quot;FROM Product WHERE name = &#39;12 inch teddy bear&#39;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<h3>HQL parameters</h3>
<p>In the example above the HQL query is represented as a <code>String</code>. And within the query there’s the <code>String</code> literal <code>'12 inch teddy bear'</code>. Such nested <code>Strings</code> can become difficult to read, so here’s a way to execute the same query using parameters instead.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="s1">&#39;FROM Product WHERE name = :name&#39;</span><span class="o">,</span> <span class="o">[</span><span class="nl">name:</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>
<h3>Get the first (or only) result</h3>
<p>If your query returns a single object as the result, or you only want to use the first result, you can use the <code>GormEntity.find(String)</code> method.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="s1">&#39;FROM Product WHERE name = :name&#39;</span><span class="o">,</span> <span class="o">[</span><span class="nl">name:</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Restrictions</h2>
<p>The example query shown earlier contains a simple equality restriction in the WHERE clause.</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='sql'><span class='line'><span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;12 inch teddy bear&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>The following table lists various SQL and HQL restrictions. As you’ll see, they are identical.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>SQL & HQL</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>name = ‘12 inch teddy bear</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>name <> ‘12 inch teddy bear</td>
                    
                <tr>
            
                <tr>
                    
                        <td>like</td>
                    
                        <td>name like '%teddy bear%'</td>
                    
                <tr>
            
                <tr>
                    
                        <td>case-insensitive like</td>
                    
                        <td>lower(name) like lower('%Teddy Bear%')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>price between 4 and 8</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not between</td>
                    
                        <td>price not between 4 and 8</td>
                    
                <tr>
            
                <tr>
                    
                        <td>in</td>
                    
                        <td>price in (3.49, 9.49)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not in</td>
                    
                        <td>not in (3.49, 9.49)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>price < 4.99</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>price > 4.99</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>price <= 4.99</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>price >= 4.99</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is null</td>
                    
                        <td>state is null</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is not null</td>
                    
                        <td>state is not null</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p><div class="alert alert-info" role="alert"><p>Neither SQL or HQL have a case-insensitive like operator, so it's simulated with the <code>lower()</code> function.</p>
</div>
</p>
<p><div class="alert alert-info" role="alert"><p>The <em>is null</em> and <em>is not null</em> restrictions above are from the <code>Address</code> domain class. I chose the <code>Address</code> domain class because the <code>Product</code> domain class doesn’t have null-able properties.</p>
</div>
</p>
<h3>Collection associations</h3>
<p>HQL has a <code>size()</code> function which can be used to count the number of items in a GORM <em>hasMany</em> association, such as the <code>products</code> association in the <code>Vendor</code> class. For example, to query the <code>Vendor</code>s with more than two <code>Product</code>s, you’d likely do something like this in SQL:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">v</span><span class="p">.</span><span class="n">id</span> 
</span><span class='line'><span class="k">FROM</span> <span class="n">vendor</span> <span class="k">as</span> <span class="n">v</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">product</span> <span class="k">as</span> <span class="n">p</span> <span class="k">ON</span> <span class="n">p</span><span class="p">.</span><span class="n">vendor_id</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">v</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">HAVING</span> <span class="k">count</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>
<p>Lets try it. Run the query in the Grails console to get the <code>List</code> of <code>Vendor</code> IDs.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">createSQLQuery</span><span class="o">(</span><span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">    SELECT v.id </span>
</span><span class='line'><span class="s2">    FROM vendor as v INNER JOIN product as p ON p.vendor_id = v.id</span>
</span><span class='line'><span class="s2">    GROUP BY v.id</span>
</span><span class='line'><span class="s2">    HAVING count(p.id) &gt; 2</span>
</span><span class='line'><span class="s2">        &quot;&quot;&quot;</span><span class="o">).</span><span class="na">list</span><span class="o">()</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>
<p>The output is <code>[1, 3]</code>. With HQL you can accomplish the same thing using <code>size()</code>. Plus, you'll get <code>Vendor</code> instances instead of their IDs. Run the following HQL query and see for yourself.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">FROM</span> <span class="n">Vendor</span> 
</span><span class='line'><span class="k">WHERE</span> <span class="k">size</span><span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>
<p>The <code>size()</code> function does all the heavy lifting! Listed below are examples of restrictions using <code>size()</code>.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>HQL</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>size(products) = 0</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>size(products) != 0</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>size(products) < 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>size(products) > 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>size(products) >= 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>size(products) <= 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>size(products) between 3 and 5</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>Isn’t that cool! In fact, the <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/"><em>from clause</em></a> article in this series shows an example of using the <code>size(someProperty) = 0</code> restriction in place of a left outer join. It's certainly a handy function.</p>
<h2>Conjunctions</h2>
<p>When joining restrictions with <em>and</em> and <em>or</em>, HQL works exactly like the SQL you’re used to. Enough with the trivial, let’s move on to one of the most powerful GORM query methods: criteria queries.</p>
<h1>Criteria query</h1>
<p>Thus far the transition into GORM queries has been straight-forward. The minor differences between SQL and HQL make it so you can leverage what you already know about SQL. Criteria queries provide a more programmer-friendly approach to GORM queries. Instead of <em>declaring</em> queries as <code>String</code>s in your Groovy code, you can <em>build</em> them using Groovy. Take a look at the following comparison of a SQL query and its criteria query equivalent.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>SQL</th>
                    
                        <th>Criteria query</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td><span style="font-family: monospace">SELECT *                         </span></td>
                    
                        <td><span style="font-family: monospace"></span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">FROM product                     </span></td>
                    
                        <td><span style="font-family: monospace">Product.withCriteria {</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">WHERE name = '12 inch teddy bear'</span></td>
                    
                        <td><span style="font-family: monospace">&nbsp;&nbsp;&nbsp;&nbsp;eq('name', '12 inch teddy bear')</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">&nbsp;</span></td>
                    
                        <td><span style="font-family: monospace">}</span></td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>In the listing above I aligned the lines of both queries so that each line's intent matches. Like with HQL, I'll skip over the equivalent of the <em>select</em> clause.</p>
<p>Criteria queries are created with a builder. The criteria query builder features methods used to assemble a query. The methods provide the means to specify restrictions, joins, sorting, etc. In the example above, <code>HibernateCriteriaBuilder.eq(String propertyName, Object value)</code> is used to add an equality restriction to the query.</p>
<h2>The builder</h2>
<p>The builder is actually a facade for a Hibernate <code>Criteria</code>. As such, it expects you to provide a <code>Closure</code> in which the builder methods are called.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">buildCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">eq</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>GormEntity.createCriteria()</code> returns a <code>HibernateCriteriaBuilder</code>. Then, <code>HibernateCriteriaBuilder.buildCriteria(Closure)</code> executes the provided closure to assemble a Hibernate Criteria, which it then returns. To continue building the query after calling <code>buildCriteria(Closure)</code> you'd have to use the Hibernate Criteria methods.</p>
<p><div class="alert alert-info" role="alert"><p>The <code>buildCriteria(Closure)</code> <code>Closure</code>'s delegate is a <code>HibernateCriteriaBuilder</code>.</p>
</div>
</p>
<p>Unlike the traditional builder design pattern, a GORM criteria query does not allow you to call the builder methods directly. For example, the following code does not work:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">()</span>
</span><span class='line'>    
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span> <span class="c1">// Throws IllegalArgumentException</span>
</span></code></pre></td></tr></table></div></figure>
<p><div class="alert alert-danger" role="alert">java.lang.IllegalArgumentException: Call to [eq] with propertyName [name] and value [12 inch teddy bear] not allowed here.</div>
</p>
<p><code>buildCriteria(Closure)</code> is seldom used because you're unlikely to use the Hibernate Criteria that it returns. Instead, criteria queries can be built <em>and</em> executed by the builder. Speaking of executing queries, lets do just that.</p>
<h2>Executing a criteria query</h2>
<p>Go ahead and run the following criteria query in the Grails console.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">products</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">eq</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>GormEntity.withCriteria(Closure)</code> does the following:</p>
<ol>
<li>Creates a <code>HibernateCriteriaBuilder</code>.</li>
<li>Uses the builder to assemble a Hibernate <code>Criteria</code>.</li>
<li>Executes the Criteria and returns the results.</li>
</ol>
<p>Lets do each step on its own so you can see what's happening.</p>
<h3>Create the builder</h3>
<p>First, create the <code>HibernateCriteriaBuilder</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now that you have a builder, use it to create a Hibernate <code>Criteria</code>.</p>
<h3>Build the query</h3>
<p>This is the point at which you actually create the query.</p>
<ol>
<li>First, call <code>buildCriteria(Closure)</code> on the builder.</li>
<li>Within the <code>Closure</code> call <code>eq(String propertyName, Object value)</code> to get the <code>Product</code> whose <code>name</code> (the property) is <code>'12 inch teddy bear'</code> (the value).</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kt">def</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">buildCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">eq</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h3>Run the query</h3>
<p>Finally, run the query by calling <code>list()</code> on the <code>Criteria</code> instance.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kt">def</span> <span class="n">products</span> <span class="o">=</span> <span class="n">criteria</span><span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>Like the HQL query, the criteria query doesn’t specify which domain properties to return. Instead it returns domain instances. The domain class on which the <code>withCriteria</code> method is executed determines which domain class instances to return.</p>
<p><div class="alert alert-info" role="alert"><p>A projection can be used to return other domain class instances and/or properties. The <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-select-clause/"><em>select clause</em></a> article is all about projections.</p>
</div>
</p>
<h3>Get first (or only) result</h3>
<p>Sometimes your query returns a single result. Or you want only the first result. Instead of retrieving the first element in the resulting list, you can...</p>
<ol>
<li>Create the builder with <code>createCriteria()</code>.</li>
<li>Call <code>HibernateCriteria.get(Closure)</code> to construct and execute the query.</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">().</span><span class="na">get</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">eq</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Restrictions</h2>
<p>Earlier, I listed various HQL restrictions. Here are their equivalents as criteria queries.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>SQL</th>
                    
                        <th>Criteria</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>name = ‘12 inch teddy bear</td>
                    
                        <td>eq('name', '12 inch teddy bear')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>name <> ‘12 inch teddy bear</td>
                    
                        <td>ne('name', '12 inch teddy bear')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>like</td>
                    
                        <td>name like '%teddy bear%'</td>
                    
                        <td>like('name', '%teddy bear%')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>case-insensitive like</td>
                    
                        <td>lower(name) like lower('%Teddy Bear%')</td>
                    
                        <td>ilike('name', '%Teddy Bear%')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>price between 4 and 8</td>
                    
                        <td>between('price', 4.0, 8.0)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not between</td>
                    
                        <td>price not between 4 and 8</td>
                    
                        <td>not { between('price', 4.0, 8.0) }</td>
                    
                <tr>
            
                <tr>
                    
                        <td>in</td>
                    
                        <td>price in (3.49, 9.49)</td>
                    
                        <td>inList('price', [3.49, 9.49])</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not in</td>
                    
                        <td>not in (3.49, 9.49)</td>
                    
                        <td>not { inList 'price', [3.49, 9.49] }</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>price < 4.99</td>
                    
                        <td>lt('price', 4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>price > 4.99</td>
                    
                        <td>gt('price', 4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>price <= 4.99</td>
                    
                        <td>le('price', 4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>price >= 4.99</td>
                    
                        <td>ge('price', 4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is null</td>
                    
                        <td>state is null</td>
                    
                        <td>isNull('state')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is not null</td>
                    
                        <td>state is not null</td>
                    
                        <td>isNotNull('state')</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>Unlike HQL which uses expressions to create restrictions, criteria queries use method calls.</p>
<p>Like HQL, criteria queries provide a way to create restrictions based on the size of a collection. The table below compares some size-based HQL restrictions with their equivalents in a criteria query.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>HQL</th>
                    
                        <th>Criteria</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>size(products) = 0</td>
                    
                        <td>sizeEq('products', 0)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>size(products) != 0</td>
                    
                        <td>sizeNe('products', 0)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>size(products) < 3</td>
                    
                        <td>sizeLt('products', 3)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>size(products) > 3</td>
                    
                        <td>sizeGt('products', 3)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>size(products) >= 3</td>
                    
                        <td>sizeGe('products', 3)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>size(products) <= 3</td>
                    
                        <td>sizeLe('products', 3)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>size(products) between 3 and 5</td>
                    
                        <td>N/A</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>Like the prior list of restrictions, criteria queries rely on method calls, not expressions. That's why there are multiple <em>size?(String propertyName, int value)</em> criteria methods and only one <code>size()</code> HQL function.</p>
<h3>What about between?</h3>
<p>You may have noticed that criteria queries do not have the equivalent of HQL's expression <code>size(products) between 3 and 5</code>. You can work around this by using <code>sizeGe()</code> along with <code>sizeLe()</code> for an inclusive <em>between</em>, and <code>sizeGt()</code> along with <code>sizeLt()</code> for exclusive <em>between</em>. Either approach requires an <em>and</em> conjunction. So lets look at some conjunctions.</p>
<h2>Conjunctions</h2>
<p>You may be wondering how criteria queries handle <em>and</em> and <em>or</em> conjunctions. For example, examine the where clause in the following SQL query.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span> 
</span><span class='line'><span class="k">WHERE</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span> <span class="k">and</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>
<p>The <em>like</em> and <em>greater than (>)</em> restrictions must both evaluate to <em>true</em> for a given record to be selected. Lets look at how you can express the same restrictions in a criteria query. Begin with a query with only a single restriction.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">like</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;%bear%&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Next, simply add the appropriate method call for the other restriction.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">like</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;%bear%&#39;</span><span class="o">)</span> <span class="c1">// This is the restriction you had already created. </span>
</span><span class='line'>    <span class="n">gt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">8.0</span><span class="o">)</span>       <span class="c1">// This is the new one. </span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>
<p>That's really all there is to it. By default, when a query contains more than one restriction they are joined by an <em>and</em> conjunction. An <em>and</em> conjunction is created with <code>HibernateCriteriaBuilder.and(Closure)</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">like</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;%bear%&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">gt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">8.0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Similarly, an <em>or</em> conjunction is created with <code>HibernateCriteriaBuilder.or(Closure)</code>. Again, starting with SQL…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">.</span><span class="mi">99</span> <span class="k">or</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">.</span><span class="mi">99</span>
</span></code></pre></td></tr></table></div></figure>
<p>The equivalent criteria query is...</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">or</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">4.99</span><span class="o">)</span>
</span><span class='line'>        <span class="n">gt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">8.99</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>As you can see, restrictions built within the <code>or(Closure)</code> closure become the <em>or</em> conjunction. Finally, combining <em>and</em> with <em>or</em>…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Product</span>
</span><span class='line'><span class="k">WHERE</span> <span class="p">(</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">.</span><span class="mi">99</span> <span class="k">or</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="k">and</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>The equivalent criteria query is…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">withCriteria</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">or</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">4.99</span><span class="o">)</span>
</span><span class='line'>        <span class="n">gt</span><span class="o">(</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="mf">8.99</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    
</span><span class='line'>    <span class="n">like</span><span class="o">(</span><span class="s1">&#39;name&#39;</span><span class="o">,</span> <span class="s1">&#39;%bear%&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Something that deluded me when I first learned about criteria queries is that they are not query definitions. They actually consist of Groovy code. In hindsight, I can't believe I overlooked this. But it means its possible to construct queries dynamically without resorting to the shenanigans you may be accustomed to with <code>String</code>s of SQL statements.  Up next is another builder approach to creating queries.</p>
<h1>Where query</h1>
<p>Like criteria queries, where queries use the builder design pattern. However, restrictions are created with Groovy expressions rather than builder method calls.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>SQL</th>
                    
                        <th>Where query</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td><span style="font-family: monospace">SELECT *</span></td>
                    
                        <td><span style="font-family: monospace"></span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">FROM product                         </span></td>
                    
                        <td><span style="font-family: monospace">Product.where {</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">WHERE name = '12 inch teddy bear'    </span></td>
                    
                        <td><span style="font-family: monospace">&nbsp;&nbsp;&nbsp;&nbsp;name == '12 inch teddy bear'</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">&nbsp;</span></td>
                    
                        <td><span style="font-family: monospace">}.list()</span></td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p><code>GormEntity.where(Closure)</code> expects a closure in which Groovy expressions are used to create restrictions. <code>where(Closure)</code> returns a <code>DetachedCriteria</code>. Finally, <code>DetachedCriteria.list()</code> executes the query and returns the results.</p>
<p>In comparison to criteria queries, it's worth pointing out is that with criteria queries you specify the property name as a <code>String</code> (ex. 'name'), while in a where query the property is specified like any other Groovy property.</p>
<p>Now it's your turn to create a where query. In the Grails console, first prepare the <code>Closure</code> that will contain the query. Since you'll be querying the <code>Product</code> domain class, call <code>Product.where(Closure)</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Then, add the equality restriction comparing the <code>name</code> property to the <code>String</code> literal <code>'12 inch teddy bear'</code>. Its just a matter of using Groovy's equality (==) operator.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;12 inch teddy bear&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Finally, execute the query by calling <code>DetachedCriteria.list()</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Get first (or only) result</h2>
<p>Sometimes your query returns a single result. Or you want only the first result. Instead of retrieving the first element in the resulting list, you can call <code>DetachedCriteria.get()</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;12 inch teddy bear&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="na">get</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Restrictions</h2>
<p>The following table lists various SQL restrictions and their equivalent where query restrictions.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>SQL</th>
                    
                        <th>Where query</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>name = ‘12 inch teddy bear</td>
                    
                        <td>name == '12 inch teddy bear'</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>name <> ‘12 inch teddy bear</td>
                    
                        <td>name != '12 inch teddy bear'</td>
                    
                <tr>
            
                <tr>
                    
                        <td>like</td>
                    
                        <td>name like '%teddy bear%'</td>
                    
                        <td>name ==~ '%teddy bear%'</td>
                    
                <tr>
            
                <tr>
                    
                        <td>case-insensitive like</td>
                    
                        <td>lower(name) like lower('%Teddy Bear%')</td>
                    
                        <td>name =~ '%Teddy Bear%'</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>price between 4 and 8</td>
                    
                        <td>price in 4.0..8.0</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not between</td>
                    
                        <td>price not between 4 and 8</td>
                    
                        <td>!(price in 4.0..8.0)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>in</td>
                    
                        <td>price in (3.49, 9.49)</td>
                    
                        <td>price in [3.49, 9.49]</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not in</td>
                    
                        <td>not in (3.49, 9.49)</td>
                    
                        <td>!(price in [3.49, 9.49])</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>price < 4.99</td>
                    
                        <td>price < 4.99 </td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>price > 4.99</td>
                    
                        <td>price > 4.99 </td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>price <= 4.99</td>
                    
                        <td>price <= 4.99 </td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>price >= 4.99</td>
                    
                        <td>price >= 4.99 </td>
                    
                <tr>
            
                <tr>
                    
                        <td>is null</td>
                    
                        <td>state is null</td>
                    
                        <td>state == null</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is not null</td>
                    
                        <td>state is not null</td>
                    
                        <td>state != null</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>Like HQL, and criteria queries, where queries can perform operations based on the size of a collection association. It's done with the <code>Collection.size()</code> method. The table below compares various size-based HQL restrictions with their where query equivalents.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>HQL</th>
                    
                        <th>Where</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>size(products) = 0</td>
                    
                        <td>products.size() == 0</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>size(products) != 0</td>
                    
                        <td>products.size() != 0</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>size(products) < 3</td>
                    
                        <td>products.size() < 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>size(products) > 3</td>
                    
                        <td>products.size() > 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>size(products) >= 3</td>
                    
                        <td>products.size() >= 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>size(products) <= 3</td>
                    
                        <td>products.size() <= 3</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>size(products) between 3 and 5</td>
                    
                        <td>N/A</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<h3>Between is missing here too!</h3>
<p>Where queries also do not have the equivalent of HQL's expression <code>size(products) between 3 and 5</code>. You can work around this by using the <code>&gt;=</code> and <code>&lt;=</code> operators for an inclusive <em>between</em>, or <code>&gt;</code> and <code>&lt;</code> for exclusive <em>between</em>. An example of an inclusive <em>between</em> is: <code>products.size() &gt;= 3 &amp;&amp; products.size() &lt;= 5</code>. Either approach requires an <em>and</em> conjunction.</p>
<h2>Conjunctions</h2>
<p>Where queries handle <em>and</em> and <em>or</em> conjunctions using Groovy logical operators. When a query contains more than one restriction by default they are joined an <em>and</em> conjunction. For example, examine the where clause in the following SQL query.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span> 
</span><span class='line'><span class="k">WHERE</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span> <span class="k">and</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>
<p>Two conditions must be met to select a given product. The equivalent restriction can be expressed as a where query like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">==~</span> <span class="s1">&#39;%bear%&#39;</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>Which can also be expressed using the <code>&amp;&amp;</code> operator like this:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">==~</span> <span class="s1">&#39;%bear%&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>An <em>or</em> conjunction is created with the <code>||</code> operator. Again, starting with SQL…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">.</span><span class="mi">99</span> <span class="k">or</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">.</span><span class="mi">99</span>
</span></code></pre></td></tr></table></div></figure>
<p>The equivalent where query is as follows:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">&lt;</span> <span class="mf">4.99</span> <span class="o">||</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mf">8.99</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<p>As you can see, restrictions built within the <code>||</code> operator become the <em>or</em> conjunction. Finally, combining <em>and</em> with <em>or</em>…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Product</span>
</span><span class='line'><span class="k">WHERE</span> <span class="p">(</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">.</span><span class="mi">99</span> <span class="k">or</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="k">and</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>The equivalent where query is…</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">where</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">&lt;</span> <span class="mf">4.99</span> <span class="o">||</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mf">8.99</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">==~</span> <span class="s1">&#39;%bear%&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="na">list</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>
<h1>Dynamic finder</h1>
<p>Dynamic finders provide a way to execute very simple queries.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>SQL</th>
                    
                        <th>Dynamic finder</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td><span style="font-family: monospace">SELECT *</span></td>
                    
                        <td><span style="font-family: monospace">&nbsp;</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">FROM product                         </span></td>
                    
                        <td><span style="font-family: monospace">Product.findAllByName('12 inch teddy bear')</span></td>
                    
                <tr>
            
                <tr>
                    
                        <td><span style="font-family: monospace">WHERE name = '12 inch teddy bear'    </span></td>
                    
                        <td><span style="font-family: monospace">&nbsp;</span></td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<p>A Dynamic finder is a domain class method following a specific naming convention. The term dynamic finder comes from the fact that the method doesn’t actually exist. Thank you, Groovy MOP.</p>
<p>The method naming convention loosely defined is <em>domainClass.findAllByPropertyNameInCamelCaseWithAComparison(and, some, parameters)</em>.</p>
<p>Using the query above as an example...</p>
<ol>
<li><em>findAllBy</em> indicates that you want to execute a dynamic finder which returns one or more <code>Product</code>s.</li>
<li><em>Name</em> specifies the property.</li>
<li>The equals operator is used by default, so it's left unspecified.</li>
<li>'12 inch teddy bear' is the property value to compare against.</li>
</ol>
<p><div class="alert alert-info" role="alert"><p>The <code>findAllBy</code> dynamic finder is implemented by <code>FindAllByFinder</code>. A list of dynamic finders can be found in the property <code>GormEntity.gormDynamicFinders</code>.</p>
</div>
</p>
<p>Lets give a dynamic finder a go. Create a one to return <em>all</em> of the <code>Product</code>s with a <code>price</code> of <code>3.49</code>. In the Grails console, begin with the domain class and <code>findAllBy</code>.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">findAllBy</span>
</span></code></pre></td></tr></table></div></figure>
<p>Next, append the property name in camel case.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">findAllByPrice</span>
</span></code></pre></td></tr></table></div></figure>
<p>That completes the method name. Now you need to add the value <code>3.49</code> as a parameter.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">findAllByPrice</span><span class="o">(</span><span class="mf">3.49</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>Finally, run it to see the three matching <code>Product</code>s.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">4</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">5</span><span class="o">,</span> 
</span><span class='line'>    <span class="n">com</span><span class="o">.</span><span class="na">emmanuelrosa</span><span class="o">.</span><span class="na">gormtut</span><span class="o">.</span><span class="na">Product</span> <span class="o">:</span> <span class="mi">6</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<h3>Get first (or only) result</h3>
<p>If your query returns a single result, or you only want to use the first result begin the dynamic finder method with <em>findBy</em> rather than <em>findAllBy</em>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s1">&#39;12 inch teddy bear&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>Like all the GORM queries discussed so far, the dynamic finder query does not specify the equivalent of a SELECT clause. In fact, dynamic finders do not support the notion. They always return a list of domain class instances.</p>
<h2>Restrictions</h2>
<p>The following table lists various SQL restrictions and the equivalent dynamic finder methods.</p>
<p><div class="panel panel-default">
    
    <div class="panel-body">
        <table class="table">
            <thead>
                <tr>
                    
                        <th>Description</th>
                    
                        <th>SQL</th>
                    
                        <th>Dynamic finder</th>
                    
                <tr>
            </thead>
            <tbody>
            
                <tr>
                    
                        <td>equality</td>
                    
                        <td>name = ‘12 inch teddy bear</td>
                    
                        <td>Product.findAllByName('12 inch teddy bear')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>inequality</td>
                    
                        <td>name <> ‘12 inch teddy bear</td>
                    
                        <td>Product.findAllByNameNotEqual('12 inch teddy bear')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>like</td>
                    
                        <td>name like '%teddy bear%'</td>
                    
                        <td>Product.findAllByNameLike('%teddy bear%')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>case-insensitive like</td>
                    
                        <td>lower(name) like lower('%Teddy Bear%')</td>
                    
                        <td>Product.findAllByNameIlike('%Teddy Bear%')</td>
                    
                <tr>
            
                <tr>
                    
                        <td>between</td>
                    
                        <td>price between 4 and 8</td>
                    
                        <td>Product.findAllByPriceBetween(4, 8)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not between</td>
                    
                        <td>price not between 4 and 8</td>
                    
                        <td>N/A</td>
                    
                <tr>
            
                <tr>
                    
                        <td>in</td>
                    
                        <td>price in (3.49, 9.49)</td>
                    
                        <td>Product.findAllByPriceInList([3.49, 9.49])</td>
                    
                <tr>
            
                <tr>
                    
                        <td>not in</td>
                    
                        <td>not in (3.49, 9.49)</td>
                    
                        <td>N/A</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than</td>
                    
                        <td>price < 4.99</td>
                    
                        <td>Product.findAllByPriceLessThan( 4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than</td>
                    
                        <td>price > 4.99</td>
                    
                        <td>Product.findAllByPriceGreaterThan(4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>less than or equal to</td>
                    
                        <td>price <= 4.99</td>
                    
                        <td>Product.findAllByPriceLessThanEquals(4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>greater than or equal to</td>
                    
                        <td>price >= 4.99</td>
                    
                        <td>Product.findAllByPriceGreaterThanEquals(4.99)</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is null</td>
                    
                        <td>state is null</td>
                    
                        <td>Address.findAllByStateIsNull()</td>
                    
                <tr>
            
                <tr>
                    
                        <td>is not null</td>
                    
                        <td>state is not null</td>
                    
                        <td>Address.findAllByStateIsNotNull()</td>
                    
                <tr>
            
            </tbody>
        </table>
    </div>
</div>
</p>
<h2>Conjunctions</h2>
<p>Dynamic finders support <em>and</em> and <em>or</em> conjunctions, but without order of precedence. For example, examine the where clause in the following SQL query.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span> 
</span><span class='line'><span class="k">WHERE</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span> <span class="k">and</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>
<p>The equivalent dynamic finder is…</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">findAllByNameLikeAndPriceGreaterThan</span><span class="o">(</span><span class="s1">&#39;%bear%&#39;</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>In the dynamic finder example above, the <em>NameLike</em> and <em>PriceGreaterThan</em> parts of the method are joined by an <em>And</em>. Then, the parameters are specified in the same order as the properties are declared in the method: <em>name</em>, then <em>price</em>.</p>
<p>An <em>or</em> conjunction works the same way:</p>
<figure class='code'><div class="highlight"><table><tr><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Product</span><span class="o">.</span><span class="na">findAllByPriceLessThanOrPriceGreaterThan</span><span class="o">(</span><span class="mf">4.99</span><span class="o">,</span> <span class="mf">8.99</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>It’s possible to combine <em>and</em> and <em>or</em> as long as order of precedence is not important. For example, the following SQL query cannot be represented as a dynamic finder:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">product</span>
</span><span class='line'><span class="k">WHERE</span> <span class="p">(</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">.</span><span class="mi">99</span> <span class="k">or</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="k">and</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">&#39;%bear%&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<h1>Conclusion</h1>
<p>That concludes this article in the GORM for SQLaddicts series. Now that you know how to construct the equivalent of a SQL <em>where</em> clause using a criteria query, where query, and dynamic finder, you're ready to tackle the equivalent of the <em>from</em> clause. <a href="http://emmanuelrosa.com/articles/gorm-for-sqladdicts-from-clause/">Ready?</a></p>
]]></content></entry></feed>